# or
m <- matrix(c(1,2,3,4,5,6), ncol=3, byrow = FALSE)
print(m)
m <- matrix(c(1,2,3,4,5,6), nrow=3, byrow=TRUE)
print(m)
# or
m <- matrix(c(1,2,3,4,5,6), ncol=3, byrow = TRUE)
print(m)
m <- matrix(c(1,2,3,4,5,6), nrow=3, byrow=FALSE)
print(m)
# or
m <- matrix(c(1,2,3,4,5,6), ncol=3, byrow = TRUE)
print(m)
?matrix
m1 = c(1,2,3,4,5,6)
p = 3
q = 2
m2 = c(1,2,3,4,5,6)
r = 2
s = 3
m1 <- matrix(m1, nrow=p, byrow=TRUE)
m2 <- matrix(m2, nrow=r, byrow=TRUE)
print(m1)
print(m2)
ans <- m1 %*% m2
print(ans)
rm(list = ls())
m_data <- c(1,2,3,4,5,6)
p = 3
q = 2
n_data <- c(1,2,3,4,5,6)
r = 2
s = 3
m <- matrix(m1, nrow=p, byrow=TRUE)
m_data <- c(1,2,3,4,5,6)
p = 3
q = 2
n_data <- c(1,2,3,4,5,6)
r = 2
s = 3
m <- matrix(m_data, nrow=p, byrow=TRUE)
n <- matrix(m_data, nrow=r, byrow=TRUE)
print(m)
print(n)
mT <- t(m)
nT < t(n)
mT <- t(m)
nT <- t(n)
print(mT)
print(nT)
ans <- m1 %*% m2
ans <- m %*% n
print(ans)
# Method 1: use in-built solve()
inv1 <- solve(m)
m_data <- c(1,2,3,4,5,6, 7, 8, 9)
p = 3
q = 3
n_data <- c(1,2,3,4,5,6, 7, 8, 9)
r = 3
s = 3
m <- matrix(m_data, nrow=p, byrow=TRUE)
n <- matrix(m_data, nrow=r, byrow=TRUE)
print(m)
print(n)
mT <- t(m)
nT <- t(n)
print(mT)
print(nT)
ans <- m %*% n
print(ans)
# NOTE: Must be a square matrix to calculate inverse
# Method 1: use in-built solve()
inv1 <- solve(m)
m_data <- c(1,2,3,4,5,6, 7, 8, 1)
p = 3
q = 3
n_data <- c(1,2,3,4,5,6, 7, 8, 1)
r = 3
s = 3
m <- matrix(m_data, nrow=p, byrow=TRUE)
n <- matrix(m_data, nrow=r, byrow=TRUE)
print(m)
print(n)
mT <- t(m)
nT <- t(n)
print(mT)
print(nT)
ans <- m %*% n
print(ans)
# NOTE: Must be a square matrix to calculate inverse
# Method 1: use in-built solve()
inv1 <- solve(m)
inv2 <- solve(n)
print(inv1)
print(inv2)
# Method 2: use inv() from MATLAB package
x <- matrix(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(solve(xT %*% X))
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(solve(xT %*% x))
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(solve(xT %*% x))
print(x %*% solve(xT %*% x) %*% xT)
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(solve(xT %*% x))
print(x %*% solve(xT %*% x) %*% xT)
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(fractions(solve(xT %*% x))
print(x %*% solve(xT %*% x) %*% xT)
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(fractions(solve(xT %*% x)))
print(x %*% solve(xT %*% x) %*% xT)
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
print(fractions(solve(xT %*% x)))
print(fractions(x %*% solve(xT %*% x) %*% xT))
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(fractions(solve(xT %*% x)))
print(fractions(solve(xT %*% x) %*% xT %*% y))
?cbind
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
x <- cbind(c(1,1,1,1,1,1), x)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(fractions(solve(xT %*% x)))
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
x <- cbind(c(1,1,1,1,1,1), x)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(x)
print(xT)
print(y)
print(fractions(solve(xT %*% x) %*% xT %*% y))
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
x <- cbind(c(1,1,1,1,1,1), x)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(x)
print(xT)
print(y)
print(solve(xT %*% x) %*% xT %*% y)
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(x)
print(xT)
print(y)
print(fractions(solve(xT %*% x) %*% xT %*% y))
library(MASS)
x_data <- c(1,1,1,1,1,-2,1,1,1,1,-1,1,1,-1,-2,1,-1,1)
nrow <- 6
ncol <- 3
x <- matrix(x_data, nrow=nrow, ncol=ncol,byrow=TRUE)
xT <- t(x)
y <- matrix(c(3,2,1,1,2,0), ncol=1)
print(x)
print(xT)
print(y)
print(fractions(solve(xT %*% x) %*% xT %*% y))
lm(y~x[,2] + x[,3])
rm(list = ls())
N <- 10000 # nolint
error_sd <- 10
x_data <- 1:N # non-random variable (explanatory variable)
error_data <- rnorm(N, mean = 0, sd = error_sd) # random variable and constant variance #nolint
b_0 <- 1 # intercept
b_1 <- 10 # slope
y_data <- b_0 + b_1 * x_data + error_data # response variable (Random variable)
x_data <-c(.02,.07,.11,.15)
y_data<-c(242,237,231,201)
N <- length(x_data)
y_bar <- mean(y_data)
x_bar <- mean(x_data)
data <- data.frame(cbind(x_data, y_data))
# ydata ~ xdata means (ydata = b_0 + b_1 * xdata)
lm_model <- lm(y_data ~ x_data, data = data)
summary(lm_model)
b_1_estimator <- coef(lm_model)[2]
b_0_estimator <- coef(lm_model)[1]
y_data_hat <- b_0_estimator + b_1_estimator * x_data
y_data_hat
rm(list = ls())
N <- 10000 # nolint
error_sd <- 10
x_data <- 1:N # non-random variable (explanatory variable)
error_data <- rnorm(N, mean = 0, sd = error_sd) # random variable and constant variance #nolint
b_0 <- 1 # intercept
b_1 <- 10 # slope
y_data <- b_0 + b_1 * x_data + error_data # response variable (Random variable)
x_data <-c(.02,.07,.11,.15)
y_data<-c(242,237,231,201)
N <- length(x_data)
y_bar <- mean(y_data)
x_bar <- mean(x_data)
data <- data.frame(cbind(x_data, y_data))
N <- 10000
error_sd <- 10
x_data <- 1:N # non-random variable (explanatory variable)
error_data <- rnorm(N, mean = 0, sd = error_sd) # random variable and constant variance #nolint
b_0 <- 1 # intercept
b_1 <- 10 # slope
y_data <- b_0 + b_1 * x_data + error_data # response variable (Random variable)
x_data <-c(.02,.07,.11,.15)
y_data<-c(242,237,231,201)
N <- length(x_data)
y_bar <- mean(y_data)
x_bar <- mean(x_data)
data <- data.frame(cbind(x_data, y_data))
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 10000 # data points
error_sd <- 10
x_data <-  matrix(c())# non-random variable (explanatory variable)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 10000 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:M+1
x_data <-  cbind(1:N, matrix(c(1:M*N), nrow=N, byrow=True))
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 10000 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:M+1
x_data <-  cbind(1:N, matrix(c(1:M*N), nrow=N, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
View(x_data)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 10000 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:M+1
x_data <-  cbind(1:N, matrix(c(1:M*N), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
View(x_data)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:M+1
x_data <-  cbind(1:N, matrix(c(1:M*N), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
View(x_data)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:M+1
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
View(x_data)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
data <- data.frame(cbind(x_data, y_data))
lm_model <- lm(y_data ~ x_data, data = data)
summary(lm_model)
y_data_hat <- b_0_estimator + b_1_estimator * x_data
lm_model <- lm(y_data ~ x_data, data = data)
summary(lm_model)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
data <- data.frame(cbind(y_data, x_data))
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
data <- data.frame(cbind(x_data, y_data))
View(data)
?lm
lm_model <- lm(y_data ~ x_data)
summary(lm_model)
View(data)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 0
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
data <- data.frame(cbind(x_data, y_data))
lm_model <- lm(y_data ~ x_data)
summary(lm_model)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error_data <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x_data <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y_data <- x_data %*% beta_real + error_data
data <- data.frame(cbind(x_data, y_data))
lm_model <- lm(y_data ~ x_data)
summary(lm_model)
rm(list = ls())
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, byrow=TRUE))
y <- x %*% beta_real + error
lm_model <- lm(y ~ x)
summary(lm_model)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
View(x)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1:N, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
View(x)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(c(1) * N, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
View(x)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
View(x)
lm_model <- lm(y ~ x)
summary(lm_model)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
View(x)
rm(list = ls())
rm(list = ls())
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
View(y)
View(x)
View(y)
View(x)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
beta_real
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(c(1:(M*N)), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
lm_model <- lm(y ~ x)
summary(lm_model)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
View(xT)
View(x)
xT <- t(x)
print(xT %*% x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(rnorm(M * N, mean=69, sd=71)), ncol=M, nrow=N, byrow=TRUE))
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(rnorm(M * N, mean=69, sd=71))), ncol=M, nrow=N, byrow=TRUE))
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(rnorm(M * N, mean=69, sd=71), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
lm_model <- lm(y ~ x)
summary(lm_model)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
print(beta_estimated)
M <- 10 # attributes B_0, B_1, ..., B_M
N <- 100 # data points
error_sd <- 10
error <- rnorm(N, mean = 0, sd = error_sd)
beta_real <- 1:(M+1)
x <-  cbind(1, matrix(rnorm(M * N, mean=69, sd=71), ncol=M, nrow=N, byrow=TRUE))
y <- x %*% beta_real + error
lm_model <- lm(y ~ x)
summary(lm_model)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
print(beta_estimated)
plot(x_data, y_data)
plot(x, y)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
print(beta_estimated)
xT <- t(x)
beta_estimated <- solve(xT %*% x) %*% xT %*% y
print(beta_estimated)
A <- matrix(c(1,0,3,0,0,2,3,2,4), byrow=TRUE, nrow=3)
Y <- c(3,0,1)
b <- c(-3,0,1)
A %*% Y + b
A <- matrix(c(1,0,3,0,0,2,3,2,4), byrow=TRUE, nrow=3)
Y <- c(3,0,1)
b <- c(-3,0,1)
A %*% Y + b
cov(A %*% Y + b)
A <- matrix(c(1,0,3,0,0,2,3,2,4), byrow=TRUE, nrow=3)
Y <- c(3,0,1)
b <- c(-3,0,1)
A %*% Y + b
cov(A %*% Y + b)
A %*% Y %*% t(A)
A <- matrix(c(1,0,3,0,0,2,3,2,4), byrow=TRUE, nrow=3)
Y <- c(3,0,1)
b <- c(-3,0,1)
A %*% Y + b
cov(A %*% Y + b)
A %*% t(Y) %*% t(A)
